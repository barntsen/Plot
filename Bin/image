#!/usr/bin/python3
'''
Image: reads a data file and plots an image on screen and can also 
output the plot on a file. It is mainly designed for seismic data and
velocity models. 
'''

import matplotlib.pyplot as pl
import sys
import argparse
import numpy as np
import parula
import colors
import babin as ba
from pltcom import *


#--------------------------------------------------------------------
#Get command line options
#---------------------------------------------------------------------
#Hack for negative floats as option
for i, arg in enumerate(sys.argv):
  if (arg[0] == '-') and arg[1].isdigit(): sys.argv[i] = ' ' + arg
parser = argparse.ArgumentParser(description="Script for plotting  2D seismic data and velocity models")
parser.add_argument("-o",dest="out",
                         help="Output graphics file")
parser.add_argument("-title",dest="title",
                         help="Plot title")
parser.add_argument("-xlabel",dest="xlabel",
                         help="x-axis label")
parser.add_argument("-ylabel",dest="ylabel",
                         help="y-axis label")
parser.add_argument("-cmin",dest="cmin",type=float,
                        help="Minimum clip value")
parser.add_argument("-cmax",dest="cmax",type=float,
                        help="Maximum clip value")
parser.add_argument("-ar",dest="ar",type=float,
                        help="Aspect ratio")
parser.add_argument("fname",
                        help="Input binary 2D file")
parser.add_argument("-bias",dest="bias",default=0.0,type=float,
                        help="Add a constant to the data")
parser.add_argument("-colormap",dest="colormap",default="gray",
                        help="matplotlib standard colormaps + new map: parula")
parser.add_argument("-bcolormap",dest="bcolormap",default="jet",
                        help="matplotlib standard colormaps + new map: parula")
parser.add_argument("-pclip",dest="pclip",type=float,
                        help="percentile clip in percentage (default 99)")
parser.add_argument("-clip",dest="clip",type=float,
                        help="clip in percentage of max value")
parser.add_argument("-n1",dest="n1",type=int,default=-1,
                        help="First dimension of data")
parser.add_argument("-n2",dest="n2",type=int,default=-1,
                        help="Second dimension of data")
parser.add_argument("-d1",dest="d1",type=float,default=1.0,
                        help="First dimension sampling interval")
parser.add_argument("-d2",dest="d2",type=float,default=1.0,
                        help="Second dimension sampling interval")
parser.add_argument("-o1",dest="o1",type=float,default=0.0,
                        help="First dimension origo")
parser.add_argument("-o2",dest="o2",type=float,default=0.0,
                        help="Second dimension origo")
parser.add_argument("-t",dest="t",action='store_true',
                        help="transpose data if this option is present")
parser.add_argument("-noshow",dest="noshow",action='store_true',
                      help="turn off plotting to screen if this option is present")
parser.add_argument("-colorbar",dest="colorbar",action='store_true',
                      help="plot colorbar if this option is present:")
parser.add_argument("-fb",dest="fb",
                      help="input binary background file. There is no scaling of the background")
parser.add_argument("-trans",dest="trans",type=float,default=0.25,
                      help="transparency default: 0.25")
parser.add_argument("-cbtitle",dest="cbtitle",
                         help="Plot title")
parser.add_argument("-x0",dest="x0",type=float,action="append",
                         help="Textbox x-ccordinate")
parser.add_argument("-y0",dest="y0",type=float,action="append",
                         help="Textbox y-ccordinate")
parser.add_argument("-x",dest="x",type=float,action="append",
                         help="Arrow tip x-coordinate")
parser.add_argument("-y",dest="y",type=float,action="append",
                         help="Arrow tip y-ccordinate")
parser.add_argument("-textbox",dest="textbox",action="append",
                         help="Textbox at position -x0,-y0, arrow tip at -x -y")
parser.add_argument("-fxy",dest="fxy",
                         help="File containing xy graph")

#Parse arguments
args = parser.parse_args()

# Axis
if args.n1 is not None:
    n1 = args.n1
else :
    print( "Missing n1!")

if args.d1 is not None:
    d1 = args.d1
else :
    d1 = 1.0

if args.o1 is not None:
    o1 = args.o1
else :
    o1 = 0.0

if args.n2 is not None:
    n2 = args.n2
else :
    print( "Missing n2!")

if args.d2 is not None:
    d2 = args.d2
else :
    d2 = 1.0

if args.o2 is not None:
    o2 = args.o2
else :
    o2 = 0.0

if args.t is True:
    transp = 1;
else:
    transp = 0; 

#Get the data
fin = ba.bin(args.fname)
data=fin.read((n2,n1))

#Get the background image 
if args.fb is not None :
    fin = ba.bin(args.fb)
    bg=fin.read((n2,n1))

#Get the xy graph
if args.fxy is not None:
   graph=np.loadtxt(args.fxy)
   gx = graph[:,0]  
   gy = graph[:,1]  

if(transp == 1):
    data=data.transpose()
    if(args.fb is not None):
        bg=bg.transpose()
    tmp = o2
    o2  = o1
    o1  = tmp
    tmp = d2
    d2  = d1
    d1  = tmp
    tmp = n1
    n1  = n2
    n2  = tmp 

ar=1.0

#--------------------------------------------------------------------
# Get scaling parameters
#---------------------------------------------------------------------
#Print min,max and absmax of data set:
amps = absmax(data)
mindata = amps[0]
maxdata = amps[1]
absdata = amps[2]

print ("=== min,max,absmax values of data:", amps)

#Default scaling of data is perecentile clip at 99%
cmin,cmax = pclip(data,99.0)
print ("default cmin,cmax: ", cmin,cmax)

if  args.pclip is not None:
    print ("Calling pclip: ", args.pclip)
    cmin,cmax = pclip(data,args.pclip)
    print ("pclip cmin,cmax: ", cmin,cmax)
if  args.clip is not None:
    cmax = (args.clip/100.0)*absdata
    cmin = -cmax
    print ("clip cmin,cmax: ", cmin,cmax)
if args.cmin is not None:
    cmin = args.cmin
    print ("cmin cmin: ", cmin)
if args.cmax is not None:
    cmax = args.cmax
    print( "cmax cmax: ", cmin)
if args.ar is not None:
    ar = args.ar
else :
    ar = 1.0

print ("=== Final clip values cmin,cmax: ", cmin,cmax)

#Add bias 
if args.bias is not None:
    data = data+args.bias
#-----------------------------------------------------------------------
# Plotting
#-----------------------------------------------------------------------
fig =pl.figure()
#Install parula colormap
parula.setcolors()

#Install umed colormap
clist = colors.get_hex_list(hex_list=1)
cmap_vp =  colors.get_continuous_cmap(clist)
pl.cm.register_cmap(name='umed', cmap=cmap_vp)

#pl.xlim(o1,o1+d1*(n1-1))
#pl.ylim(o2+d2*(n2-1),o2)

#Plot marker
if args.textbox is not None :
  i=0
  for text in args.textbox :
    x=args.x[i]; y=args.y[i]; x0=args.x0[i]; y0=args.y0[i]; 

    pl.annotate(text ,xy=(x,y),
              xytext=(x0,y0),bbox=dict(ec='black',fc='white', pad=5),
              arrowprops=dict(arrowstyle="->"))
    i=i+1
  
#Plot grah
if args.fxy is not None:
   pl.plot(gx,gy)

#Plot data array
data=np.clip(data,cmin,cmax)
im=pl.imshow(data,clim=(cmin,cmax),cmap=args.colormap,
          extent=[o1,o1+d1*n1,o2+d2*n2,o2],interpolation='bilinear')  
im.cmap.set_under('white')


#Plot also background array
if args.fb is not None :
    pl.imshow(bg,alpha=args.trans,cmap=args.bcolormap,
              extent=[o1,o1+d1*n1,o2+d2*n2,o2],interpolation='spline36')  
print("Bounding box:",o1,o1+d1*n1,o2+d2*n2,o2)


#Set aspect ratio
ax=pl.gca()
asr = 1.0/(ax.get_data_ratio()*ar)
pl.Axes.set_aspect(ax,asr)
if args.colorbar is not None : 
    cbar=pl.colorbar(im,fraction=0.02, pad=0.04)


#Title and axis decorations
if args.title is not None:
    pl.title(args.title)
if args.xlabel is not None:
    pl.xlabel(args.xlabel)
if args.ylabel is not None:
    pl.ylabel(args.ylabel)
if args.cbtitle is not None:
    cbar.ax.set_title(args.cbtitle)

#Output plot
if args.out is not None:
    fname=args.out
    pl.savefig(fname,bbox_inches='tight')

#Show on screen
if args.noshow is False:
    pl.show()
